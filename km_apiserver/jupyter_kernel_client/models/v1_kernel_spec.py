from __future__ import annotations

import pprint

import six
from kubernetes.client.configuration import Configuration


class V1KernelConnectionConfig:
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    openapi_types = {  # noqa: RUF012
        "ip": "str",
        "shell_port": "int",
        "iopub_port": "int",
        "stdin_port": "int",
        "control_port": "int",
        "hb_port": "int",
        "kernel_id": "str",
        "key": "str",
        "transport": "str",
        "signature_scheme": "str",
        "kernel_name": "str",
    }

    attribute_map = {  # noqa: RUF012
        "ip": "ip",
        "shell_port": "shellPort",
        "iopub_port": "iopubPort",
        "stdin_port": "stdinPort",
        "control_port": "controlPort",
        "hb_port": "hbPort",
        "kernel_id": "kernelId",
        "key": "key",
        "transport": "transport",
        "signature_scheme": "signatureScheme",
        "kernel_name": "kernelName",
    }

    def __init__(
        self,
        ip=None,
        shell_port=None,
        iopub_port=None,
        stdin_port=None,
        control_port=None,
        hb_port=None,
        kernel_id=None,
        key=None,
        transport=None,
        signature_scheme=None,
        kernel_name=None,
        local_vars_configuration=None,
    ):
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ip = None
        self._shell_port = None
        self._iopub_port = None
        self._stdin_port = None
        self._control_port = None
        self._hb_port = None
        self._kernel_id = None
        self._key = None
        self._transport = None
        self._signature_scheme = None
        self._kernel_name = None
        self.discriminator = None

        self.ip = ip
        self.shell_port = shell_port
        self.iopub_port = iopub_port
        self.stdin_port = stdin_port
        self.control_port = control_port
        self.hb_port = hb_port
        self.kernel_id = kernel_id
        self.key = key
        self.transport = transport
        self.signature_scheme = signature_scheme
        self.kernel_name = kernel_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))  # noqa: C417
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result


class V1KernelSpec:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {  # noqa: RUF012
        "template": "V1PodTemplateSpec",
        "idle_timeout_seconds": "int",
        "culling_interval_seconds": "int",
        "kernel_connection_config": "V1KernelConnectionConfig",
    }

    attribute_map = {  # noqa: RUF012
        "template": "template",
        "idle_timeout_seconds": "idleTimeoutSeconds",
        "culling_interval_seconds": "cullingIntervalSeconds",
        "kernel_connection_config": "kernelConnectionConfig",
    }

    def __init__(
        self,
        template=None,
        idle_timeout_seconds=None,
        culling_interval_seconds=None,
        kernel_connection_config=None,
        local_vars_configuration=None,
    ):
        """V1KernelSpec - a model defined in OpenAPI"""
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._template = None
        self._idle_timeout_seconds = None
        self._culling_interval_seconds = None
        self._kernel_connection_config = None
        self.discriminator = None

        self.template = template
        self.idle_timeout_seconds = idle_timeout_seconds
        self.culling_interval_seconds = culling_interval_seconds
        self.kernel_connection_config = kernel_connection_config

    @property
    def template(self):
        """Gets the template of this V1KernelSpec.  # noqa: E501

        :return: The template of this V1KernelSpec.  # noqa: E501
        :rtype: V1PodTemplateSpec
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this V1KernelSpec.

        :param template: The template of this V1KernelSpec.  # noqa: E501
        :type: V1PodTemplateSpec
        """
        if self.local_vars_configuration.client_side_validation and template is None:
            error_msg = "Invalid value for `template`, must not be `None`"
            raise ValueError(error_msg)

        self._template = template

    @property
    def idle_timeout_seconds(self):
        """Gets the idle_timeout_seconds of this V1KernelSpec.  # noqa: E501

        :return: The idle_timeout_seconds of this V1KernelSpec.  # noqa: E501
        :rtype: int
        """
        return self._idle_timeout_seconds

    @idle_timeout_seconds.setter
    def idle_timeout_seconds(self, idle_timeout_seconds):
        """Sets the idle_timeout_seconds of this V1KernelSpec.

        :param idle_timeout_seconds: The idle_timeout_seconds of this V1KernelSpec.  # noqa: E501
        :type: int
        """
        self._idle_timeout_seconds = idle_timeout_seconds

    @property
    def culling_interval_seconds(self):
        """Gets the culling_interval_seconds of this V1KernelSpec.  # noqa: E501

        :return: The culling_interval_seconds of this V1KernelSpec.  # noqa: E501
        :rtype: int
        """
        return self._culling_interval_seconds

    @culling_interval_seconds.setter
    def culling_interval_seconds(self, culling_interval_seconds):
        """Sets the culling_interval_seconds of this V1KernelSpec.

        :param culling_interval_seconds: The culling_interval_seconds of this V1KernelSpec.  # noqa: E501
        :type: int
        """
        self._culling_interval_seconds = culling_interval_seconds

    @property
    def kernel_connection_config(self):
        """Gets the kernel_connection_config of this V1KernelSpec.  # noqa: E501

        :return: The kernel_connection_config of this V1KernelSpec.  # noqa: E501
        :rtype: V1KernelConnectionConfig
        """
        return self._kernel_connection_config

    @kernel_connection_config.setter
    def kernel_connection_config(self, kernel_connection_config):
        """Sets the kernel_connection_config of this V1KernelSpec.

        :param kernel_connection_config: The kernel_connection_config of this V1KernelSpec.  # noqa: E501
        :type: V1KernelConnectionConfig
        """
        self._kernel_connection_config = kernel_connection_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(  # noqa: C417
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: ((item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item),
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1KernelSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1KernelSpec):
            return True

        return self.to_dict() != other.to_dict()
